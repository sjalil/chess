
package org.me.mybackgroundapp;

import java.awt.Color;
import javax.swing.JLabel;

public class ImageDisplay1 extends javax.swing.JFrame {

    /**
     * Creates new form ImageDisplay1
     */
    int lock;
    int posx;
    int posy;
    int toX;
    int toY;
    JLabel toGo;
    JLabel toBKilled;
    ChessPiece currentPiece;
    Boolean signal;
    Location dest;
    boolean moveToLoc;
    int turn; 
    boolean action; // to prevent action on wrong turn;
    Location activeLocation; // the current location of the board
    
    
    
    public ImageDisplay1() {
        super("Chess Board");
        initComponents();
        lock = 0;
        signal = true;
        dest = new Location();
        turn = 1;
        activeLocation = new Location();
        toGo = new JLabel();
        toBKilled = new JLabel();
        moveToLoc = false;
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        rookBlack1 = new javax.swing.JLabel();
        BishopBlack2 = new javax.swing.JLabel();
        KingBlack = new javax.swing.JLabel();
        rookWhite1 = new javax.swing.JLabel();
        QueenBlack = new javax.swing.JLabel();
        BishopBlack1 = new javax.swing.JLabel();
        knightWhite = new javax.swing.JLabel();
        knightBlack2 = new javax.swing.JLabel();
        pawnWhite1 = new javax.swing.JLabel();
        pawnBlack2 = new javax.swing.JLabel();
        pawnBlack3 = new javax.swing.JLabel();
        pawnBlack4 = new javax.swing.JLabel();
        pawnBlack5 = new javax.swing.JLabel();
        pawnBlack6 = new javax.swing.JLabel();
        pawnBlack7 = new javax.swing.JLabel();
        pawnBlack8 = new javax.swing.JLabel();
        rookBlack2 = new javax.swing.JLabel();
        rookWhite2 = new javax.swing.JLabel();
        knightBlack1 = new javax.swing.JLabel();
        knightWhite2 = new javax.swing.JLabel();
        KingWhite = new javax.swing.JLabel();
        QueenWhite = new javax.swing.JLabel();
        bishopWhite1 = new javax.swing.JLabel();
        bishopWhite2 = new javax.swing.JLabel();
        pawnBlack1 = new javax.swing.JLabel();
        pawnWhite2 = new javax.swing.JLabel();
        pawnWhite3 = new javax.swing.JLabel();
        pawnWhite4 = new javax.swing.JLabel();
        pawnWhite5 = new javax.swing.JLabel();
        pawnWhite6 = new javax.swing.JLabel();
        pawnWhite7 = new javax.swing.JLabel();
        pawnWhite8 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setOpaque(false);
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        rookBlack1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/RookBlack.png"))); // NOI18N
        rookBlack1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rookBlack1MouseClicked(evt);
            }
        });

        BishopBlack2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/Bishop.png"))); // NOI18N
        BishopBlack2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BishopBlack2MouseClicked(evt);
            }
        });

        KingBlack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/kingBlack.png"))); // NOI18N
        KingBlack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                KingBlackMouseClicked(evt);
            }
        });

        rookWhite1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/RookWhite.png"))); // NOI18N
        rookWhite1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rookWhite1MouseClicked(evt);
            }
        });

        QueenBlack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/queen.png"))); // NOI18N
        QueenBlack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                QueenBlackMouseClicked(evt);
            }
        });

        BishopBlack1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/Bishop.png"))); // NOI18N
        BishopBlack1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BishopBlack1MouseClicked(evt);
            }
        });

        knightWhite.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/KnightWhite.png"))); // NOI18N
        knightWhite.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                knightWhiteMouseClicked(evt);
            }
        });

        knightBlack2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/Knight.png"))); // NOI18N
        knightBlack2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                knightBlack2MouseClicked(evt);
            }
        });

        pawnWhite1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/PawnWhite.png"))); // NOI18N
        pawnWhite1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pawnWhite1MouseClicked(evt);
            }
        });

        pawnBlack2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/Pawn.png"))); // NOI18N
        pawnBlack2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pawnBlack2MouseClicked(evt);
            }
        });

        pawnBlack3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/Pawn.png"))); // NOI18N
        pawnBlack3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pawnBlack3MouseClicked(evt);
            }
        });

        pawnBlack4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/Pawn.png"))); // NOI18N
        pawnBlack4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pawnBlack4MouseClicked(evt);
            }
        });

        pawnBlack5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/Pawn.png"))); // NOI18N
        pawnBlack5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pawnBlack5MouseClicked(evt);
            }
        });

        pawnBlack6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/Pawn.png"))); // NOI18N
        pawnBlack6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pawnBlack6MouseClicked(evt);
            }
        });

        pawnBlack7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/Pawn.png"))); // NOI18N
        pawnBlack7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pawnBlack7MouseClicked(evt);
            }
        });

        pawnBlack8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/Pawn.png"))); // NOI18N
        pawnBlack8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pawnBlack8MouseClicked(evt);
            }
        });

        rookBlack2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/RookBlack.png"))); // NOI18N
        rookBlack2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rookBlack2MouseClicked(evt);
            }
        });

        rookWhite2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/RookWhite.png"))); // NOI18N
        rookWhite2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rookWhite2MouseClicked(evt);
            }
        });

        knightBlack1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/Knight.png"))); // NOI18N
        knightBlack1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        knightBlack1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                knightBlack1MouseClicked(evt);
            }
        });

        knightWhite2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/KnightWhite.png"))); // NOI18N
        knightWhite2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                knightWhite2MouseClicked(evt);
            }
        });

        KingWhite.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/KingWhite.png"))); // NOI18N
        KingWhite.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                KingWhiteMouseClicked(evt);
            }
        });

        QueenWhite.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/QueenWhite.png"))); // NOI18N
        QueenWhite.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                QueenWhiteMouseClicked(evt);
            }
        });

        bishopWhite1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/BishopWhite.png"))); // NOI18N
        bishopWhite1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bishopWhite1MouseClicked(evt);
            }
        });

        bishopWhite2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/BishopWhite.png"))); // NOI18N
        bishopWhite2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bishopWhite2MouseClicked(evt);
            }
        });

        pawnBlack1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/Pawn.png"))); // NOI18N
        pawnBlack1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pawnBlack1MouseClicked(evt);
            }
        });
        pawnBlack1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                pawnBlack1MouseMoved(evt);
            }
        });

        pawnWhite2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/PawnWhite.png"))); // NOI18N
        pawnWhite2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pawnWhite2MouseClicked(evt);
            }
        });

        pawnWhite3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/PawnWhite.png"))); // NOI18N
        pawnWhite3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pawnWhite3MouseClicked(evt);
            }
        });

        pawnWhite4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/PawnWhite.png"))); // NOI18N
        pawnWhite4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pawnWhite4MouseClicked(evt);
            }
        });

        pawnWhite5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/PawnWhite.png"))); // NOI18N
        pawnWhite5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pawnWhite5MouseClicked(evt);
            }
        });

        pawnWhite6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/PawnWhite.png"))); // NOI18N
        pawnWhite6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pawnWhite6MouseClicked(evt);
            }
        });

        pawnWhite7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/PawnWhite.png"))); // NOI18N
        pawnWhite7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pawnWhite7MouseClicked(evt);
            }
        });

        pawnWhite8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/PawnWhite.png"))); // NOI18N
        pawnWhite8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pawnWhite8MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pawnWhite1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rookWhite2)
                            .addComponent(pawnBlack1)
                            .addComponent(pawnWhite2)
                            .addComponent(rookBlack2))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(pawnBlack2)
                            .addComponent(knightWhite)
                            .addComponent(knightBlack1))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bishopWhite1)
                    .addComponent(BishopBlack2)
                    .addComponent(pawnWhite6)
                    .addComponent(pawnBlack4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pawnBlack3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(KingBlack)
                            .addComponent(KingWhite)
                            .addComponent(pawnWhite3))
                        .addGap(8, 8, 8)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(BishopBlack1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(QueenBlack)
                            .addComponent(QueenWhite)
                            .addComponent(pawnWhite4)
                            .addComponent(pawnBlack6, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bishopWhite2, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(pawnWhite5, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(22, 22, 22))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(pawnBlack5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(knightBlack2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pawnBlack7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pawnWhite7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(knightWhite2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(rookWhite1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rookBlack1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pawnBlack8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(pawnWhite8))
                .addGap(21, 21, 21))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(BishopBlack2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rookBlack2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(knightBlack1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(pawnBlack2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(pawnBlack4)
                                .addComponent(pawnBlack3))
                            .addComponent(pawnBlack1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(BishopBlack1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(knightBlack2)
                                .addComponent(rookBlack1)
                                .addComponent(KingBlack))
                            .addComponent(QueenBlack, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pawnBlack6)
                            .addComponent(pawnBlack5)
                            .addComponent(pawnBlack7)
                            .addComponent(pawnBlack8))))
                .addGap(320, 320, 320)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pawnWhite1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pawnWhite2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pawnWhite3, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pawnWhite4, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pawnWhite5, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pawnWhite6, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pawnWhite7, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pawnWhite8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rookWhite1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(rookWhite2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(knightWhite, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(knightWhite2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(bishopWhite2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(bishopWhite1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(KingWhite, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(QueenWhite, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jPanel1, gridBagConstraints);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/me/mybackgroundapp/resources/Chess_Board_gray.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jLabel1, gridBagConstraints);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jPanel2, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rookBlack1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rookBlack1MouseClicked
        // TODO add your handling code here:
        ChessBoard board = ChessBoard.getInstance("LUMS Chess");
        if(turn == 1 && lock ==0){
            currentPiece = (ChessPiece)board.rookBlack1;
            activeLocation =board.rookBlack1.currentLoc;
            rookBlack1.setOpaque(true);
            rookBlack1.setBackground(Color.green);
            //rookBlack1.setBorder(BorderFactory.createLineBorder(Color.green));
            toGo = this.rookBlack1;
            turn *=-1;
            action = true;
            lock++;
        }
        else if(turn == 1 && lock>0){
            dest = board.rookBlack1.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isWhite() && signal){
                moveToLoc = true;
                board.rookBlack1.alive = false;
                board.rookBlack1.kill(currentPiece);
                rookBlack1.setLocation(1000, 1000);
                move(toGo);
                lock =0;
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false; 
            //lock++;
        }
        
        
    }//GEN-LAST:event_rookBlack1MouseClicked

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        // TODO add your handling code here:
        ChessBoard board = ChessBoard.getInstance("LUMS Chess");
     if(lock>0){
        if(action){
            posx = evt.getX();
            posy = evt.getY();
            toX = posx - (posx%75);
            toY = posy - ( posy%75);
            dest.findLocation(toX,toY);
            isValid(currentPiece);
            if(signal){
                move(toGo);
            }
            else{
                System.out.println("Invalid Move outer");
                lock =0;
            }
            lock=0;
            currentPiece = null;
            toGo = new JLabel();
            dest = new Location();
            activeLocation = new Location();
        }
     }
    }//GEN-LAST:event_jPanel1MouseClicked

    private void BishopBlack2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BishopBlack2MouseClicked
        // TODO add your handling code here:
        if(turn ==1 && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)board.bishopBlack2;
            activeLocation =board.bishopBlack2.currentLoc;
            BishopBlack2.setOpaque(true);
            BishopBlack2.setBackground(Color.green);
            //BishopBlack2.setBorder(BorderFactory.createLineBorder(Color.green));
            toGo = this.BishopBlack2;
            action = true;
            lock++;
        }
        else if(turn == 1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest = board.bishopBlack2.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isWhite() && signal){
                moveToLoc = true;
                board.bishopBlack2.alive = false;
                board.bishopBlack2.kill(currentPiece);
                BishopBlack2.setLocation(1000, 1000);
                move(toGo);
                lock =0;
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;  
            //lock++;
        }
       
    }//GEN-LAST:event_BishopBlack2MouseClicked

    private void KingBlackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_KingBlackMouseClicked
        // TODO add your handling code here:
        if(turn ==1 && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)board.blackKing;
            activeLocation =board.blackKing.currentLoc;
            //KingBlack.setBorder(BorderFactory.createLineBorder(Color.green));
            KingBlack.setBackground(Color.green);
            KingBlack.setOpaque(true);
        
            toGo = this.KingBlack;
            action = true;
            lock ++;
        }
        else if(turn == 1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.blackKing.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isWhite() && signal){
                moveToLoc = true;
                board.blackKing.alive = false;
                board.blackKing.kill(currentPiece);
                KingBlack.setLocation(1000, 1000);
                lock =0;
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
                this.dispose();
                EndFrame frame =new EndFrame();
                frame.win =0;
                frame.setVisible(true);
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;
           // lock++;
        }
        
    }//GEN-LAST:event_KingBlackMouseClicked

    private void rookWhite1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rookWhite1MouseClicked
        // TODO add your handling code here:
        if(turn == -1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)board.rookWhite1;
            activeLocation =board.rookWhite1.currentLoc;
            rookWhite1.setBackground(Color.green);
            rookWhite1.setOpaque(true);
            System.out.println("pn2 x: "+board.rookWhite1.currentLoc.x);
            System.out.println("pn2 y: "+board.rookWhite1.currentLoc.y);
        
            toGo = this.rookWhite1;
            turn *=-1;
            action = true;
            lock++;
        }
        else if(turn == -1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest = board.rookWhite1.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isBlack() && signal){
                moveToLoc = true;
                board.rookWhite1.alive = false;
                board.rookWhite1.kill(currentPiece);
                rookWhite1.setLocation(1000, 1000);
                lock =0;
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;
           // lock++;
        }
    }//GEN-LAST:event_rookWhite1MouseClicked

    private void QueenBlackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_QueenBlackMouseClicked
        // TODO add your handling code here:
        if(turn == 1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)board.blackQueen;
            activeLocation =board.blackQueen.currentLoc;
            System.out.println("pn2 x: "+board.blackQueen.currentLoc.x);
            System.out.println("pn2 y: "+board.blackQueen.currentLoc.y);
            QueenBlack.setBackground(Color.green);
            QueenBlack.setOpaque(true);
        
            toGo = this.QueenBlack;
            turn *=-1;
            action = true;
            lock++;
        }
        else if(turn == 1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest = board.blackQueen.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isWhite() && signal){
                moveToLoc = true;
                board.blackQueen.alive = false;
                board.blackQueen.kill(currentPiece);
                QueenBlack.setLocation(1000, 1000);
                lock =0;
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;
            //lock ++;
        }
    }//GEN-LAST:event_QueenBlackMouseClicked

    private void BishopBlack1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BishopBlack1MouseClicked
        // TODO add your handling code here:
        ChessBoard board = ChessBoard.getInstance("LUMS Chess");
        if(turn == 1  && lock ==0){
            currentPiece = (ChessPiece)board.bishopBlack1;
            activeLocation =board.bishopBlack1.currentLoc;
            BishopBlack1.setBackground(Color.green);
            BishopBlack1.setOpaque(true);
        
            toGo = this.BishopBlack1;
            action = true;
            turn *= -1;
            lock++;
        }
        else if(turn == 1 && lock>0){
            dest = board.bishopBlack1.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isWhite()&& signal){
                moveToLoc = true;
                board.bishopBlack1.alive = false;
                board.bishopBlack1.kill(currentPiece);
                BishopBlack1.setLocation(1000, 1000);
                lock =0;
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;
           // lock++;
        }
        
    }//GEN-LAST:event_BishopBlack1MouseClicked

    private void knightWhiteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_knightWhiteMouseClicked
        // TODO add your handling code here:
        if(turn == -1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)board.knightWhite1;
            activeLocation =board.knightWhite1.currentLoc;
            knightWhite.setBackground(Color.green);
            knightWhite.setOpaque(true);
        
            toGo = this.knightWhite;
            turn *= -1;
            action = true;
            lock++;
        }
        else if(turn == -1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest = board.knightWhite1.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isBlack()&& signal){
                moveToLoc = true;
                board.knightWhite1.alive = false;
                board.knightWhite1.kill(currentPiece);
                knightWhite.setLocation(1000, 1000);
                lock =0;
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;
           // lock++;
        }
        
    }//GEN-LAST:event_knightWhiteMouseClicked

    private void knightBlack2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_knightBlack2MouseClicked
        // TODO add your handling code here:
        if(turn == 1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)board.knightBlack2;
            activeLocation =board.knightBlack2.currentLoc;
            knightBlack2.setBackground(Color.green);
            knightBlack2.setOpaque(true);
        
            toGo = this.knightBlack2;
            turn *= -1;
            action = true;
            lock++;
        }
        else if(turn == 1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.knightBlack2.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isWhite()&& signal){
                moveToLoc = true;
                board.knightBlack2.alive = false;
                board.knightBlack2.kill(currentPiece);
                knightBlack2.setLocation(1000, 1000); 
                lock =0;
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;
           // lock++;
        }
        
    }//GEN-LAST:event_knightBlack2MouseClicked

    private void pawnWhite1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pawnWhite1MouseClicked
        // TODO add your handling code here:
        if(turn ==-1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)board.pawnWhite1;
            pawnWhite1.setBackground(Color.green);
            activeLocation =board.pawnWhite1.currentLoc;
            pawnWhite1.setOpaque(true);
            toGo = this.pawnWhite1;
            action = true;
            turn *=-1;
            lock++;
        }
        else if(turn == -1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.pawnWhite1.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isBlack()&& signal){
                moveToLoc = true;
                board.pawnWhite1.alive = false;
                board.pawnWhite1.kill(currentPiece);
                pawnWhite1.setLocation(1000, 1000);
                lock=0;
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;
           // lock++;
        }
        
    }//GEN-LAST:event_pawnWhite1MouseClicked

    private void pawnBlack2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pawnBlack2MouseClicked
        // TODO add your handling code here:
        if(turn ==1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            
            System.out.println("pn2 x: "+board.pawnBlack2.currentLoc.x);
            System.out.println("pn2 y: "+board.pawnBlack2.currentLoc.y);
            pawnBlack2.setBackground(Color.green);
            pawnBlack2.setOpaque(true);
            toGo = this.pawnBlack2;
            currentPiece = (ChessPiece)(board.pawnBlack2);
            activeLocation =board.pawnBlack2.currentLoc;
            turn *= -1;
            action = true;
            lock ++;
        }
        else if(turn == 1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.pawnBlack2.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isWhite()&& signal){
                moveToLoc = true;
                board.pawnBlack2.alive = false;
                board.pawnBlack2.kill(currentPiece);
                pawnBlack2.setLocation(1000, 1000);
                lock =0;
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;  
           // lock++;
        }
        
    }//GEN-LAST:event_pawnBlack2MouseClicked

    private void pawnBlack3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pawnBlack3MouseClicked
        // TODO add your handling code here:
        if(turn ==1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)(board.pawnBlack3);
            activeLocation =board.pawnBlack3.currentLoc;
            pawnBlack3.setBackground(Color.green);
            pawnBlack3.setOpaque(true);
            toGo = this.pawnBlack3;
            turn *= -1;
            action = true;
            lock++;
        }
        else if(turn == 1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.pawnBlack3.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isWhite()&& signal){
                moveToLoc = true;
                board.pawnBlack3.alive = false;
                board.pawnBlack3.kill(currentPiece);
                pawnBlack3.setLocation(1000, 1000);
                lock =0;
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;  
           // lock++;
        }
        
    }//GEN-LAST:event_pawnBlack3MouseClicked

    private void pawnBlack4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pawnBlack4MouseClicked
        // TODO add your handling code here:
        if(turn ==1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)(board.pawnBlack4);
            activeLocation =board.pawnBlack4.currentLoc;
            pawnBlack4.setBackground(Color.green);
            pawnBlack4.setOpaque(true);
            toGo = this.pawnBlack4;
            turn *= -1;
            action = true;
            lock++;
        }
        else if(turn == 1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.pawnBlack4.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isWhite()&& signal){
                moveToLoc = true;
                board.pawnBlack4.alive = false;
                board.pawnBlack4.kill(currentPiece);
                pawnBlack4.setLocation(1000, 1000);
                lock =0;
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;

            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;  
            //lock++;
        }
    }//GEN-LAST:event_pawnBlack4MouseClicked

    private void pawnBlack5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pawnBlack5MouseClicked
        // TODO add your handling code here:
        if(turn ==1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)(board.pawnBlack5);
            activeLocation =board.pawnBlack5.currentLoc;
            pawnBlack5.setBackground(Color.green);
            pawnBlack5.setOpaque(true);
            toGo = this.pawnBlack5;
            turn *= -1;
            action = true;
            lock++;
        }
        else if(turn == 1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.pawnBlack5.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isWhite()&& signal){
                moveToLoc = true;
                board.pawnBlack5.alive = false;
                board.pawnBlack5.kill(currentPiece);
                pawnBlack5.setLocation(1000, 1000);
                lock =0;
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false; 
           // lock++;
        }
        
    }//GEN-LAST:event_pawnBlack5MouseClicked

    private void pawnBlack6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pawnBlack6MouseClicked
        // TODO add your handling code here:
       if(turn ==1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)(board.pawnBlack6);
            activeLocation =board.pawnBlack6.currentLoc;
            pawnBlack6.setBackground(Color.green);
            pawnBlack6.setOpaque(true);
            toGo = this.pawnBlack6;
            turn *= -1;
            action = true;
            lock ++;
        }
       else if(turn == 1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.pawnBlack6.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isWhite()&& signal){
                moveToLoc = true;
                board.pawnBlack6.alive = false;
                board.pawnBlack6.kill(currentPiece);
                pawnBlack6.setLocation(1000, 1000);  
                lock =0;
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false; 
          //  lock ++;
        }
    }//GEN-LAST:event_pawnBlack6MouseClicked

    private void pawnBlack7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pawnBlack7MouseClicked
        // TODO add your handling code here:
        if(turn ==1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)(board.pawnBlack7);
            activeLocation =board.pawnBlack7.currentLoc;
            pawnBlack7.setBackground(Color.green);
            pawnBlack7.setOpaque(true);
            toGo = this.pawnBlack7;
            turn *= -1;
            action = true;
            lock ++;
        }
        else if(turn == 1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.pawnBlack7.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isWhite()&& signal){
                moveToLoc = true;
                board.pawnBlack7.alive = false;
                board.pawnBlack7.kill(currentPiece);
                pawnBlack7.setLocation(1000, 1000);
                lock =0;
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false; 
          //  lock ++;
        }
    }//GEN-LAST:event_pawnBlack7MouseClicked

    private void pawnBlack8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pawnBlack8MouseClicked
        // TODO add your handling code here:
        if(turn ==1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)(board.pawnBlack8);
            activeLocation =board.pawnBlack8.currentLoc;
            pawnBlack8.setBackground(Color.green);
            pawnBlack8.setOpaque(true);
            toGo = this.pawnBlack8;
            turn *= -1;
            action = true;
            lock++;
        }
        else if(turn == 1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.pawnBlack8.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isWhite()&& signal){
                moveToLoc = true;
                board.pawnBlack8.alive = false;
                board.pawnBlack8.kill(currentPiece);
                pawnBlack8.setLocation(1000, 1000);
                lock =0;
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;  
          //  lock++;
        }
        
    }//GEN-LAST:event_pawnBlack8MouseClicked

    private void rookBlack2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rookBlack2MouseClicked
        // TODO add your handling code here:
        if(turn == 1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)board.rookBlack2;
            activeLocation =board.rookBlack2.currentLoc;
            rookBlack2.setBackground(Color.green);
            rookBlack2.setOpaque(true);
        
            toGo = this.rookBlack2;
            turn *= -1;
            action = true;
            lock ++;
        }
        else if(turn == 1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.rookBlack2.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isWhite()&& signal){
                moveToLoc = true;
                board.rookBlack2.alive = false;
                board.rookBlack2.kill(currentPiece);
                rookBlack2.setLocation(1000, 1000);
                lock =0;
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;
           // lock++;
        }
        
    }//GEN-LAST:event_rookBlack2MouseClicked

    private void rookWhite2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rookWhite2MouseClicked
        // TODO add your handling code here:
         if(turn == -1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)board.rookWhite2;
            activeLocation =board.rookWhite2.currentLoc;
            rookWhite2.setBackground(Color.green);
            rookWhite2.setOpaque(true);
        
            toGo = this.rookWhite2;
            turn *= -1;
            action = true;
            lock ++;
        }
        else if(turn == -1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.rookWhite2.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isBlack()&& signal){
                moveToLoc = true;
                board.rookWhite2.alive = false;
                board.rookWhite2.kill(currentPiece);
                rookWhite2.setLocation(1000, 1000);
                lock =0;
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;
           // lock++;
        }
         
    }//GEN-LAST:event_rookWhite2MouseClicked

    private void knightBlack1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_knightBlack1MouseClicked
        // TODO add your handling code here:
        if(turn == 1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)board.knightBlack1;
            activeLocation =board.knightBlack1.currentLoc;
            knightBlack1.setBackground(Color.green);
            knightBlack1.setOpaque(true);
        
            toGo = this.knightBlack1;
            turn *= -1;
            action = true;
            lock ++;
        }
        else if(turn == 1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.knightBlack1.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isWhite()&& signal){
                moveToLoc = true;
                board.knightBlack1.alive = false;
                board.knightBlack1.kill(currentPiece);
                knightBlack1.setLocation(1000, 1000);
                lock =0;
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;
           // lock++;
        }
        
       
    }//GEN-LAST:event_knightBlack1MouseClicked

    private void knightWhite2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_knightWhite2MouseClicked
        // TODO add your handling code here:
        if(turn == -1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)board.knightWhite2;
            activeLocation =board.knightWhite2.currentLoc;
            knightWhite2.setBackground(Color.green);
            knightWhite2.setOpaque(true);
        
            toGo = this.knightWhite2;
            turn *= -1;
            action = true;
            lock ++;
        }
        else if(turn == -1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.knightWhite2.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isBlack()&& signal){
                moveToLoc = true;
                board.knightWhite2.alive = false;
                board.knightWhite2.kill(currentPiece);
                knightWhite2.setLocation(1000, 1000);
                lock =0;
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;
          //  lock++;
        }
        
    }//GEN-LAST:event_knightWhite2MouseClicked

    private void KingWhiteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_KingWhiteMouseClicked
        // TODO add your handling code here:
        if(turn == -1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)board.whiteKing;
            activeLocation =board.whiteKing.currentLoc;
            KingWhite.setBackground(Color.green);
            KingWhite.setOpaque(true);
        
            toGo = this.KingWhite;
            turn *= -1;
            action = true;
            lock++;
        }
        else if(turn == -1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.whiteKing.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isBlack()&& signal){
                moveToLoc = true;
                board.whiteKing.alive = false;
                board.whiteKing.kill(currentPiece);
                KingWhite.setLocation(1000, 1000);
                lock =0;
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
                this.dispose();
                EndFrame frame =new EndFrame();
                frame.win=1;
                frame.setVisible(true);
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;
          //  lock++;
        }
        
    }//GEN-LAST:event_KingWhiteMouseClicked

    private void QueenWhiteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_QueenWhiteMouseClicked
        // TODO add your handling code here:
        if(turn == -1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            
            System.out.println("Current x "+board.whiteQueen.currentLoc.x);
            System.out.println("Current y "+board.whiteQueen.currentLoc.y);
            QueenWhite.setBackground(Color.green);
            QueenWhite.setOpaque(true);
            currentPiece = (ChessPiece)board.whiteQueen;
            activeLocation =board.whiteQueen.currentLoc;
            toGo = this.QueenWhite;
            turn *=-1;
            action = true;
            lock ++;
        }
        else if(turn == -1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.whiteQueen.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isBlack() && signal){
                moveToLoc = true;
                board.whiteQueen.alive = false;
                board.whiteQueen.kill(currentPiece);
                QueenWhite.setLocation(1000, 1000); 
                lock =0;
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false; 
         //   lock++;
        }
        
    }//GEN-LAST:event_QueenWhiteMouseClicked

    private void bishopWhite1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bishopWhite1MouseClicked
        // TODO add your handling code here:
        if(turn == -1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)board.bishopWhite1;
            activeLocation =board.bishopWhite1.currentLoc;
            bishopWhite1.setBackground(Color.green);
            bishopWhite1.setOpaque(true);
        
            toGo = this.bishopWhite1;
            turn *=-1;
            action = true;
            lock ++;
        }
        else if(turn == -1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.bishopWhite1.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isBlack()&& signal){
                moveToLoc = true;
                board.bishopWhite1.alive = false;
                board.bishopWhite1.kill(currentPiece);
                bishopWhite1.setLocation(1000, 1000);
                lock =0;
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;
         //   lock++;
        }
        
    }//GEN-LAST:event_bishopWhite1MouseClicked

    private void bishopWhite2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bishopWhite2MouseClicked
        // TODO add your handling code here:
        if(turn == -1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)board.bishopWhite2;
            activeLocation =board.bishopWhite2.currentLoc;
            bishopWhite2.setBackground(Color.green);
            bishopWhite2.setOpaque(true);
        
            toGo = this.bishopWhite2;
            turn *=-1;
            action = true;
            lock ++;
        }
        else if(turn == -1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.bishopWhite2.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isBlack()&& signal){
                moveToLoc = true;
                board.bishopWhite2.alive = false;
                board.bishopWhite2.kill(currentPiece);
                bishopWhite2.setLocation(1000, 1000);
                lock =0;
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;
          //  lock++;
        }
        
    }//GEN-LAST:event_bishopWhite2MouseClicked

    private void pawnBlack1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pawnBlack1MouseClicked
        // TODO add your handling code here:
        if(turn ==1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)board.pawnBlack1;
            activeLocation =board.pawnBlack1.currentLoc;
            pawnBlack1.setBackground(Color.green);
            pawnBlack1.setOpaque(true);
        
            toGo = this.pawnBlack1;
            turn *= -1;
            action = true;
            lock ++;
        }
        else if(turn == 1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.pawnBlack1.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isWhite()&& signal){
                moveToLoc = true;
                board.pawnBlack1.alive = false;
                board.pawnBlack1.kill(currentPiece);
                pawnBlack1.setLocation(1000, 1000);
                lock =0;
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;
          //  lock++;
        }
        
    }//GEN-LAST:event_pawnBlack1MouseClicked

    private void pawnWhite2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pawnWhite2MouseClicked
        // TODO add your handling code here:
        if(turn ==-1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)board.pawnWhite2;
            activeLocation =board.pawnWhite2.currentLoc;
            pawnWhite2.setBackground(Color.green);
            pawnWhite2.setOpaque(true);
        
            toGo = this.pawnWhite2;
            action = true;
            turn *=-1;
            lock ++;
        }
        else if(turn == -1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.pawnWhite2.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isBlack()&& signal){
                moveToLoc = true;
                board.pawnWhite2.alive = false;
                board.pawnWhite2.kill(currentPiece);
                pawnWhite2.setLocation(1000, 1000);
                lock =0;
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;
          //  lock++;
        }
        
    }//GEN-LAST:event_pawnWhite2MouseClicked

    private void pawnWhite3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pawnWhite3MouseClicked
        // TODO add your handling code here:
        if(turn ==-1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)board.pawnWhite3;
            activeLocation =board.pawnWhite3.currentLoc;
            pawnWhite3.setBackground(Color.green);
            pawnWhite3.setOpaque(true);
        
            toGo = this.pawnWhite3;
            action = true;
            turn *=-1;
            lock++;
        }
        else if(turn == -1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.pawnWhite3.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isBlack()&& signal){
                moveToLoc = true;
                board.pawnWhite3.alive = false;
                board.pawnWhite3.kill(currentPiece);
                pawnWhite3.setLocation(1000, 1000);
                lock =0;
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;
          //  lock++;
        }
        
    }//GEN-LAST:event_pawnWhite3MouseClicked

    private void pawnWhite4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pawnWhite4MouseClicked
        // TODO add your handling code here:
        if(turn ==-1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)board.pawnWhite4;
            activeLocation =board.pawnWhite4.currentLoc;
            pawnWhite4.setBackground(Color.green);
            pawnWhite4.setOpaque(true);
        
            toGo = this.pawnWhite4;
            action = true;
            turn *=-1;
            lock ++;
        }
        else if(turn == -1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.pawnWhite4.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isBlack()&& signal){
                moveToLoc = true;
                board.pawnWhite4.alive = false;
                board.pawnWhite4.kill(currentPiece);
                pawnWhite4.setLocation(1000, 1000);
                lock =0;
                move(toGo);
                currentPiece = null;
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;
           // lock++;
        }
        
    }//GEN-LAST:event_pawnWhite4MouseClicked

    private void pawnWhite5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pawnWhite5MouseClicked
        // TODO add your handling code here:
        if(turn ==-1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)board.pawnWhite5;
            activeLocation =board.pawnWhite5.currentLoc;
            pawnWhite5.setBackground(Color.green);
            pawnWhite5.setOpaque(true);
        
            toGo = this.pawnWhite5;
            action = true;
            turn *=-1;
            lock++;
        }
        else if(turn == -1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.pawnWhite5.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isBlack() && signal){
                moveToLoc = true;
                board.pawnWhite5.alive = false;
                board.pawnWhite5.kill(currentPiece);
                pawnWhite5.setLocation(1000, 1000);
                lock =0;
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;
         //   lock++;
        }
        
    }//GEN-LAST:event_pawnWhite5MouseClicked

    private void pawnWhite6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pawnWhite6MouseClicked
        // TODO add your handling code here:
        if(turn ==-1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)board.pawnWhite6;
            activeLocation =board.pawnWhite6.currentLoc;
            pawnWhite6.setBackground(Color.green);
            pawnWhite6.setOpaque(true);
        
            toGo = this.pawnWhite6;
            action = true;
            turn *=-1;
            lock ++;
        }
        else if(turn == -1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.pawnWhite6.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isBlack()&& signal){
                moveToLoc = true;
                board.pawnWhite6.alive = false;
                board.pawnWhite6.kill(currentPiece);
                pawnWhite6.setLocation(1000, 1000);
                lock =0;  
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;
         //   lock++;
        }
       
    }//GEN-LAST:event_pawnWhite6MouseClicked

    private void pawnWhite7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pawnWhite7MouseClicked
        // TODO add your handling code here:
        if(turn ==-1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)board.pawnWhite7;
            activeLocation =board.pawnWhite7.currentLoc;
            pawnWhite7.setBackground(Color.green);
            pawnWhite7.setOpaque(true);
        
            toGo = this.pawnWhite7;
            action = true;
            turn *=-1;
            lock ++;
        }
        else if(turn == -1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.pawnWhite7.currentLoc;
            isValid(currentPiece);
            if(currentPiece.isBlack() && signal){
                moveToLoc = true;
                board.pawnWhite7.alive = false;
                board.pawnWhite7.kill(currentPiece);
                pawnWhite7.setLocation(1000, 1000);
                lock =0;
                move(toGo);
                toGo = new JLabel();
                dest = new Location();
                moveToLoc = false;
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;
        //    lock++;
        }
        
    }//GEN-LAST:event_pawnWhite7MouseClicked

    private void pawnWhite8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pawnWhite8MouseClicked
        // TODO add your handling code here:
        if(turn ==-1  && lock ==0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            currentPiece = (ChessPiece)board.pawnWhite8;
            activeLocation =board.pawnWhite8.currentLoc;
            pawnWhite8.setBackground(Color.green);
            pawnWhite8.setOpaque(true);
        
            toGo = this.pawnWhite8;
            action = true;
            turn *=-1;
            lock++;
        }
        else if(turn == -1 && lock>0){
            ChessBoard board = ChessBoard.getInstance("LUMS Chess");
            dest =board.pawnWhite8.currentLoc;
            if(currentPiece.isBlack()){
                isValid(currentPiece);
                if(signal){
                    moveToLoc = true;
                    board.pawnWhite8.alive = false;
                    board.pawnWhite8.kill(currentPiece);
                    //pawnWhite8.setBounds(1000, 1000, 70, 70);
                    pawnWhite8.setLocation(1000, 1000);
                    lock =0;
                    move(toGo);
                    toGo = new JLabel();
                    dest = new Location();
                    moveToLoc = false;
                }
                
            }
            else{
                System.out.println("Invalid Move");
                lock =0;
            }
            
        }
        else{
            System.out.println("Wait for Your Turn");
            action = false;
        }
        
    }//GEN-LAST:event_pawnWhite8MouseClicked

    private void pawnBlack1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pawnBlack1MouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_pawnBlack1MouseMoved

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImageDisplay1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImageDisplay1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImageDisplay1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageDisplay1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new ImageDisplay1().setVisible(true);
            }
        });
    }
    
    
    public void move(JLabel x){
        if(moveToLoc == false){
        x.setBounds(toX+20, toY+20, 45, 45);
        }
        else{
            x.setBounds((((dest.x) -1)*75 +20), (((dest.y)-1)*75 +20), 45, 45);
        }
        x.setOpaque(false);
        x.setBackground(null);
    }
    
    public void isValid(ChessPiece pc){
        ChessBoard board = ChessBoard.getInstance("LUMS Chess");
        int val;
        if(pc.validateMove(dest)){
            val = board.Isempty[activeLocation.x][activeLocation.y];
            board.Isempty[activeLocation.x][activeLocation.y] = 0;
            pc.updateCurrentLocation(dest);
            board.Isempty[dest.x][dest.y] = val;
            signal = true;
        }
        else{
            signal = false;
            turn*=-1;
        }
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BishopBlack1;
    private javax.swing.JLabel BishopBlack2;
    private javax.swing.JLabel KingBlack;
    private javax.swing.JLabel KingWhite;
    private javax.swing.JLabel QueenBlack;
    private javax.swing.JLabel QueenWhite;
    private javax.swing.JLabel bishopWhite1;
    private javax.swing.JLabel bishopWhite2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel knightBlack1;
    private javax.swing.JLabel knightBlack2;
    private javax.swing.JLabel knightWhite;
    private javax.swing.JLabel knightWhite2;
    private javax.swing.JLabel pawnBlack1;
    private javax.swing.JLabel pawnBlack2;
    private javax.swing.JLabel pawnBlack3;
    private javax.swing.JLabel pawnBlack4;
    private javax.swing.JLabel pawnBlack5;
    private javax.swing.JLabel pawnBlack6;
    private javax.swing.JLabel pawnBlack7;
    private javax.swing.JLabel pawnBlack8;
    private javax.swing.JLabel pawnWhite1;
    private javax.swing.JLabel pawnWhite2;
    private javax.swing.JLabel pawnWhite3;
    private javax.swing.JLabel pawnWhite4;
    private javax.swing.JLabel pawnWhite5;
    private javax.swing.JLabel pawnWhite6;
    private javax.swing.JLabel pawnWhite7;
    private javax.swing.JLabel pawnWhite8;
    private javax.swing.JLabel rookBlack1;
    private javax.swing.JLabel rookBlack2;
    private javax.swing.JLabel rookWhite1;
    private javax.swing.JLabel rookWhite2;
    // End of variables declaration//GEN-END:variables
}
